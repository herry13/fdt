TODO
====
- try to put always's derived variable as precondition of each action
- implement "at end" constraints
- try to use conditional effect to handle "sometime" constraint
- modify QualitativePreference Rovers domain from IPC5 benchmark suite to contain only hard-constraint
- add an action that separates real-plans and "preference-evaluation" plan

WORKING WITH FILES
==================
- translate.py
- normalize.py
- sas_tasks.py
- instantiate.py [1]
- pddl_to_prolog.py
- pddl/pddl_file.py
- pddl/conditions.py [1]
- pddl/tasks.py [1]
- pddl/actions.py [1]
- pddl/effects.py
- pddl/pddl_types.py [1]

Supported Type of Constraint
============================
1. always:
    (forall (...) (always (...)))
    (always (...))
2. sometime:
    (forall (...) (sometime (...)))
    (sometime (...))
3. sometime-after:
    (forall (...) (sometime-after (...) (...)))
    (sometime-after (...) (...))
4. sometime-before:
    (forall (...) (sometime-before (...) (...)))
    (sometime-before (...) (...))
5. at-most-once:
    (forall (...) (at-most-once (...)))
    (at-most-once (...))

Order of Constraints based-on their strength
============================================
1. always
2. at-end
3. at-most-once
4. sometime-after
5. sometime-before
6. sometime

DONE
====
- find-out how "goal" condition is compiled, then use the same method to compile "1st-type always"
  see: normalize() in "normalize.py"
- create "verifier_operator" in translate_task() of "translate.py"
- implement method to compile 1st-type "always": (forall (...) (always (...)))
- implement method to compile 2nd-type "always": (always (...))
- implement method to compile 2nd-type "sometime": (sometime (...))
- implement method to compile 1st-type "sometime": (forall (...) (sometime (...)))
- separate between 1st & 2nd types of constraint
- implement 1st-type "sometime-after": (forall (...) (sometime-after (...) (...)))
- implement 1st-type "sometime-before": (forall (...) (sometime-after (...) (...)))
- implement 1st-type "at-most-once": (forall (...) (at-most-once (...)))
- modify: pddl/conditions.py to parse other modalities: sometime-before, sometime-after, most-once

