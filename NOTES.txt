TODO
====
- modify: pddl/conditions.py to parse other modalities: sometime-before, sometime-after, most-once
- try to put always's derived variable as precondition of each action
- implement "most-once": a variable with init value TRUE, falsify ???

WORKING WITH FILES
==================
- translate.py
- normalize.py
- sas_tasks.py
- instantiate.py [1]
- pddl_to_prolog.py
- pddl/pddl_file.py
- pddl/conditions.py [1]
- pddl/tasks.py [1]
- pddl/actions.py [1]
- pddl/effects.py
- pddl/pddl_types.py [1]

Supported Type of Constraint
============================
1. always:
2. sometime

CHANGELOG
=========
24-11-2012
- implement 2nd-type sometime-after modality
- modify "search/search_engine.cc" to remove auxiliary trajectory constraints
- enable 2nd-type always modality
- enable 1st-type sometime modality

22-11-2012
- enable 2nd-type sometime modality
- enable 1st-type always modality of trajectory constraints
  - add "always-variable" and "always-verifier"
  - given the planning task with 1st-type always, the solution plan can be produced correctly

21-11-2012
- parse & normalize 1st-type always: (forall (...) (always (...)))
- add 1st-type always in goal condition

DONE
====
- find-out how "goal" condition is compiled, then use the same method to compile "1st-type always"
  see: normalize() in "normalize.py"
- create "verifier_operator" in translate_task() of "translate.py"
- implement method to compile 1st-type "always": (forall (...) (always (...)))
- implement method to compile 2nd-type "always": (always (...))
- implement method to compile 2nd-type "sometime": (sometime (...))
- implement method to compile 1st-type "sometime": (forall (...) (sometime (...)))
- separate between 1st & 2nd types of constraint
